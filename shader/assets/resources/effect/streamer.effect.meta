{
  "ver": "1.0.15",
  "uuid": "305f7b5b-5798-46ce-8def-c44083f8d1dd",
  "compiledShaders": [
    {
      "vert": "\n#define _IS_VERT_SHADER 1\n\nprecision highp float;\n\nuniform mat4 cc_matViewProj;\n\n#if _USE_MODEL\n  uniform mat4 cc_matWorld;\n#endif\n\nattribute vec3 a_position;\nattribute lowp vec4 a_color;\n\n#if USE_TEXTURE\n  attribute mediump vec2 a_uv0;\n  varying mediump vec2 v_uv0;\n#endif\n\nvarying lowp vec4 v_color;\n\nvoid main () {\n  mat4 mvp;\n  \n  #if _USE_MODEL\n    mvp = cc_matViewProj * cc_matWorld;\n  #else\n    mvp = cc_matViewProj;\n  #endif\n\n  #if USE_TEXTURE\n    v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = mvp * vec4(a_position, 1);\n}\n\n\n",
      "frag": "\n#define _IS_FRAG_SHADER 1\n\nprecision highp float;\n\n#if USE_TEXTURE\n  uniform sampler2D texture;\n  varying mediump vec2 v_uv0;\n  uniform float start_x;\n  uniform float tan_value;\n  uniform float light_width;\n  uniform float light_strength;\n#endif\n\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying lowp vec4 v_color;\n\nvoid main () {\n  vec4 color = v_color;\n\n  #if USE_TEXTURE\n    color *= texture2D(texture, v_uv0);\n    #if _USE_ETC1_TEXTURE\n      color.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n    float y1 = -1.0 * tan_value * (v_uv0.x - start_x);\n    float y2 = -1.0 * tan_value * (v_uv0.x - start_x - light_width);\n\n    if (v_uv0.y > y1 && v_uv0.y < y2) {\n      \n      float dis = v_uv0.y * -1.0 / tan_value + (light_width / 2.0) + start_x - v_uv0.x;\n      if (dis < 0.0) {\n        dis = dis * -1.0;\n      }\n\n      \n      \n      float sc = dis / (light_width / 2.0);\n  \n      \n      \n      \n\n      float lightA = (1.0 - sin(sc * 3.1415926536 / 2.0)) * light_strength;\n\n      float newr = color.r * (1.0 - lightA) + 255.0 * lightA;\n      float newg = color.g * (1.0 - lightA) + 255.0 * lightA;\n      float newb = color.b * (1.0 - lightA) + 255.0 * lightA;      \n      float newa = color.a * (1.0 - lightA) + 1.0 * lightA;\n\n      color = vec4(newr, newg, newb, newa);\n    }\n  #endif\n\n  gl_FragColor = color;\n}\n\n\n"
    }
  ],
  "subMetas": {}
}